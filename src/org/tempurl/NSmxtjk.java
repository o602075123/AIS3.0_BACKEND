package org.tempurl;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.8
 * 2017-04-21T09:33:07.282+08:00
 * Generated source version: 3.1.8
 * 
 */
@WebServiceClient(name = "n_smxtjk", 
                  wsdlLocation = "http://197.70.20.30:18094/smxtjk/n_smxtjk.asmx?WSDL",
                  targetNamespace = "http://tempurl.org") 
public class NSmxtjk extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempurl.org", "n_smxtjk");
    public final static QName NSmxtjkSoap = new QName("http://tempurl.org", "n_smxtjkSoap");
    public final static QName NSmxtjkSoap12 = new QName("http://tempurl.org", "n_smxtjkSoap12");
    public final static QName NSmxtjkHttpPost = new QName("http://tempurl.org", "n_smxtjkHttpPost");
    public final static QName NSmxtjkHttpGet = new QName("http://tempurl.org", "n_smxtjkHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://197.70.20.30:18094/smxtjk/n_smxtjk.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(NSmxtjk.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://197.70.20.30:18094/smxtjk/n_smxtjk.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public NSmxtjk(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public NSmxtjk(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public NSmxtjk() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public NSmxtjk(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public NSmxtjk(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public NSmxtjk(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns NSmxtjkSoap
     */
    @WebEndpoint(name = "n_smxtjkSoap")
    public NSmxtjkSoap getNSmxtjkSoap() {
        return super.getPort(NSmxtjkSoap, NSmxtjkSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NSmxtjkSoap
     */
    @WebEndpoint(name = "n_smxtjkSoap")
    public NSmxtjkSoap getNSmxtjkSoap(WebServiceFeature... features) {
        return super.getPort(NSmxtjkSoap, NSmxtjkSoap.class, features);
    }


    /**
     *
     * @return
     *     returns NSmxtjkSoap
     */
    @WebEndpoint(name = "n_smxtjkSoap12")
    public NSmxtjkSoap getNSmxtjkSoap12() {
        return super.getPort(NSmxtjkSoap12, NSmxtjkSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NSmxtjkSoap
     */
    @WebEndpoint(name = "n_smxtjkSoap12")
    public NSmxtjkSoap getNSmxtjkSoap12(WebServiceFeature... features) {
        return super.getPort(NSmxtjkSoap12, NSmxtjkSoap.class, features);
    }


    /**
     *
     * @return
     *     returns NSmxtjkHttpPost
     */
    @WebEndpoint(name = "n_smxtjkHttpPost")
    public NSmxtjkHttpPost getNSmxtjkHttpPost() {
        return super.getPort(NSmxtjkHttpPost, NSmxtjkHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NSmxtjkHttpPost
     */
    @WebEndpoint(name = "n_smxtjkHttpPost")
    public NSmxtjkHttpPost getNSmxtjkHttpPost(WebServiceFeature... features) {
        return super.getPort(NSmxtjkHttpPost, NSmxtjkHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns NSmxtjkHttpGet
     */
    @WebEndpoint(name = "n_smxtjkHttpGet")
    public NSmxtjkHttpGet getNSmxtjkHttpGet() {
        return super.getPort(NSmxtjkHttpGet, NSmxtjkHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NSmxtjkHttpGet
     */
    @WebEndpoint(name = "n_smxtjkHttpGet")
    public NSmxtjkHttpGet getNSmxtjkHttpGet(WebServiceFeature... features) {
        return super.getPort(NSmxtjkHttpGet, NSmxtjkHttpGet.class, features);
    }

}
